#!/bin/bash
#
# This is a `main` module of the SmartPrompt engine.
#
# Smart Prompt @PROJECT_VERSION@
# Copyright (c) 2013-2021 Alex Turbov <i.zaufi@gmail.com>
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#

# Check for interactive bash and that we haven't already been sourced.
[[ -z "$BASH_VERSION" || -z "$PS1" || -n "$SMART_PROMPT_PLUGINS" ]] && return

# Load configuration file
if [[ -f "@CMAKE_INSTALL_FULL_SYSCONFDIR@/@PROJECT_NAME@.conf" ]]; then
    source "@CMAKE_INSTALL_FULL_SYSCONFDIR@/@PROJECT_NAME@.conf"
fi

# Try load terminal specific config file
if [[ -n ${TERM} && -f "@CMAKE_INSTALL_FULL_SYSCONFDIR@/@PROJECT_NAME@.${TERM}.conf" ]]; then
    source "@CMAKE_INSTALL_FULL_SYSCONFDIR@/@PROJECT_NAME@.${TERM}.conf"
fi

# Try load user level overrides...
if [[ -f "${XDG_CONFIG_HOME:-${HOME}/.config}/@PROJECT_NAME@rc" ]]; then
    source "${XDG_CONFIG_HOME:-${HOME}/.config}/@PROJECT_NAME@rc"
fi

# ... and terminal specific overrides as well
if [[ -n ${TERM} && -f "${XDG_CONFIG_HOME:-${HOME}/.config}/@PROJECT_NAME@rc.${TERM}" ]]; then
    source "${XDG_CONFIG_HOME:-${HOME}/.config}/@PROJECT_NAME@rc.${TERM}"
fi

# Get reusable functions into the scope
if [[ -f "@CMAKE_INSTALL_FULL_LIBEXECDIR@/@PROJECT_NAME@/@PROJECT_NAME@-functions.sh" ]]; then
    source "@CMAKE_INSTALL_FULL_LIBEXECDIR@/@PROJECT_NAME@/@PROJECT_NAME@-functions.sh"
else
    logger -t @PROJECT_NAME@ "Reusable functions library " \
        "'@CMAKE_INSTALL_FULL_LIBEXECDIR@/@PROJECT_NAME@/@PROJECT_NAME@-functions.sh' "   \
        "not found. Installation seems broken!"
    return
fi

# Declare a global associative array to be filled by found plugins
declare -A SMART_PROMPT_PLUGINS

# Loading plugins
if [[ -d "@CMAKE_INSTALL_FULL_LIBEXECDIR@/@PROJECT_NAME@/context-checkers.d" ]]; then
    for plugin in @CMAKE_INSTALL_FULL_LIBEXECDIR@/@PROJECT_NAME@/context-checkers.d/[0-9][0-9]*.sh; do
        if _sp_is_debug; then
            echo -e "\e[1;30mloading ${plugin}…\e[38m"
        fi
        source ${plugin}
    done
fi

# Loading user plugins
if [[ -d "${XDG_CONFIG_HOME:-${HOME}/.config}/@PROJECT_NAME@.d" ]]; then
    for plugin in ${XDG_CONFIG_HOME:-${HOME}/.config}/@PROJECT_NAME@.d/[0-9][0-9]*.sh; do
        if _sp_is_debug; then
            echo -e "\e[1;30mloading ${plugin}…\e[38m"
        fi
        source ${plugin}
    done
fi

function _get_registered_context_checkers()
{
    for checker in "${!SMART_PROMPT_PLUGINS[@]}"; do
        echo "${checker}"
    done | sort
}

function _smart_prompt()
{
    # NOTE As the very first action, store an exit code of the
    # previous command...
    local _sp__prev_cmd_exit_code=$?

    # Get configured colors (or defaults)
    # NOTE Before set desired color, make sure there is no
    # other styles in effect...it is why `reset' is a leading
    # (and hardcoded) "color" in a sequence...

    local sp_color_user
    local sp_reset
    if [[ ${EUID} != 0 ]]; then
        _eval_color_string "reset ${SP_COLOR_USER:-bright-green}" sp_color_user
    else
        _eval_color_string "reset ${SP_COLOR_SUSER:-bright-red}" sp_color_user
    fi
    _eval_color_string 'reset' sp_reset

    local sp_color_alert
    _eval_color_string "reset ${SP_COLOR_ALERT:-'bright-red'}" sp_color_alert

    local sp_color_warn
    _eval_color_string "reset ${SP_COLOR_WARN:-'yellow'}" sp_color_warn

    local sp_color_info
    _eval_color_string "reset ${SP_COLOR_INFO:-'bright-green'}" sp_color_info

    local sp_color_notice
    _eval_color_string "reset ${SP_COLOR_NOTICE:-'bright-cyan'}" sp_color_notice

    local sp_color_debug
    _eval_color_string "reset ${SP_COLOR_DEBUG:-'dark-grey'}" sp_color_debug

    local sp_color_misc
    _eval_color_string "reset ${SP_COLOR_MISC:-'white'}" sp_color_misc

    local sp_color_seg
    _eval_color_string "reset ${SP_SEGMENT_COLOR:-bright-blue}" sp_color_seg

    # Get some other (non color) configurable parameters
    local -r sp_time_fmt=${SP_TIME_FMT:-%H:%M %d/%m}
    local -r sp_seg=${sp_color_seg}${SP_SEGMENT_DELIMITER:-"〉"}

    # Iterate over registered plugins and collect strings to be appended to PS1
    local sp_ps=''
    local checker
    for checker in $(_get_registered_context_checkers); do
        if _sp_is_debug; then
            echo -ne "\e[1;30mchecking ${checker}…\e[38m "
        fi
        if ${checker}; then
            if _sp_is_debug; then
                echo -e "\e[1;32mok\e[38m\e[38m"
            fi

            for action in ${SMART_PROMPT_PLUGINS[${checker}]}; do
                [[ ${SP_TRACE} == ${checker} ]] && set -x
                sp_ps+="$(${action})${sp_seg}"
                [[ ${SP_TRACE} == ${checker} ]] && set +x
            done

        elif _sp_is_debug; then
            echo -e "\e[1;31m!!\e[38m"
        fi
    done
    # Form the final PS1
    PS1="${sp_ps}${sp_reset}"
}

function _smart_prompt_ps2()
{
    local sp_color_ps2
    _eval_color_string "reset ${SP_CONTINUE_MARKER_COLOR:-red}" sp_color_ps2

    local sp_color_seg
    _eval_color_string "reset ${SP_SEGMENT_COLOR:-bright-blue}" sp_color_seg

    local sp_reset
    _eval_color_string 'reset' sp_reset

    echo "${sp_color_ps2}${SP_CONTINUE_MARKER:-…}${sp_color_seg}${SP_SEGMENT_DELIMITER:-〉}${sp_reset}"
}

function _smart_prompt_ps4()
{
    local sp_color_seg
    _eval_color_string "reset ${SP_SEGMENT_COLOR:-bright-blue}" sp_color_seg

    local sp_reset
    _eval_color_string 'reset' sp_reset

    local sp_trace_src
    _eval_color_string "reset ${SP_TRACE_FILE_COLOR:-dark-grey}" sp_trace_src

    local sp_trace_line
    _eval_color_string "reset ${SP_TRACE_LINENO_COLOR:-dark-grey}" sp_trace_line

    local sp_trace_code
    _eval_color_string "reset ${SP_TRACE_CODE_COLOR:-grey}" sp_trace_code

    local sp_src="${sp_trace_src}\${BASH_SOURCE/#.\//}:${sp_trace_line}\${LINENO}"

    echo "${SP_TRACE_MARK:-+ } ${sp_src}${sp_color_seg}${SP_SEGMENT_DELIMITER:-〉}${sp_reset}${sp_trace_code}\033[50D\033[30C"
}

export PROMPT_COMMAND=_smart_prompt
export PS2="$(_smart_prompt_ps2)"
export PS4="$(_smart_prompt_ps4)"

# kate: hl bash;
